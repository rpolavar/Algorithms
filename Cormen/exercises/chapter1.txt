1.1-1 Give a real-world example that requires sorting or a real-world example that requires computing a convex hull.
a. Sorting is required to rank the candidates for a university admission based on their scores.  Sorting is everywhere: search results, NetFlix movies, income levels, ETC.
Linear programming is a good example for convex hulls.  Online SVM classifiers are associated with convex hulls.

1.1-2 Other than speed, what other measures of efficiency might one use in a real-world setting?
a. Memory, storage and other  computational resources required to run the given algorithm are important too.  

1.1-3 Select a data structure that you have seen previously, and discuss its strengths and limitations.
a. Array is known to everyone.  The strength is the quick access to its constituent elements.  Weakness is of course to do with not being able to extend it beyond its original size without copying all the elements.

1.14 How are the shortest-path and traveling-salesman problems given above similar?  How are they different?
a. They are similar in the sense that we need to find the shortest way to connect a bunch of points.  They are different since the traveling salesman has to cover every point but the shortest path algorithm needs to  connect only source and sink.

1.1-5 Come up with a real-world problem in which only the best solution will do. Then come up with one in which a solution that is "approximately" the best is good enough.
a. The best solution is required when it comes to routing an ambulance carrying patients who are in a critical situation.  In search result ranking, an approximate ranking is sufficient.

1.2-1 Give an example of an application that requires algorithmic content at the application level, and discuss the function of the algorithms involved.
a. Take a spreadsheet program.  You certainly need searching and sorting algorithms apart from others.

1.2-2 Suppose we are comparing implementations of insertion sort and merge sort on the same machine. For inputs of size n, insertion sort runs in 8n^{2} steps, while merge sort runs in 64nlgn steps. For which values of n does insertion sort beat merge sort?
a. As long as n is less than 44, insertion sort wins.  Pure and boring number crunching!

 1.2-3 What is the smallest value of n such that an algorithm whose running time is 100n^{2} runs faster than an algorithm whose running time is 2^{n} on the same machine?
a. Once n is greater than equal to 15, the first one (100*n^2) wins.  Similar unamusing arithmetic computation!
